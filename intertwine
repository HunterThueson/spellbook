#!/usr/bin/env bash

################
## Intertwine ##
################

# Cut two videos together such that video 1 plays for 5 seconds, then video 2 plays for 5 seconds, then video 1 again (and so on).

# Requires at least three arguments:
# - 1: input video #1
# - 2: input video #2
# - 3: output video -- output format/codec is specified by extension in this argument by default (but can be explicitly declared)

# Example:
#   $ interlace ~/videos/video1.mp4 ~/videos/subdirectory/video2.mp4 ~/output/video-out.mp4

###########################
## Function declarations ##
###########################

lend_a_hand () {
	cat <<- _end_of_message
		Usage: ${0##*/} [OPTIONS] [INPUT-OPTION(S)] input_0 [INPUT-OPTION(S)] input_1 [OUTPUT-OPTION(s)] output
		
		${0##*/} is a command line utility for "intertwining" two video files (of the same resolution/codec/etc.) together on a given
		interval. More precisely, let's say our \$interval is 5 seconds: ${0##*/} will create a new video \$output in which the first
		5 seconds of \$input_0 will play, followed by the first 5 seconds of \$input_1, followed by timestamps 00:00:05 - 00:00:10
		of \$input_0, and so on until playback of both files has ended.

		If one of the files has a longer duration than the other, ${0##*/} will append the excess onto \$output by default (though this
		behavior can be changed with \`-d\` and \`-l\`).

		General options:
		    -h, --help:              display help message

		Output options:
		    -i, --interval:          set video switching interval (in seconds)
		    -l, --loop-excess:       instead of appending the remainder of the longer input, continue switching on the interval and loop
		                             back to the beginning of the shorter input.
		    -d, --delete-excess:     instead of appending the remainder of the longer input, discard it and immediately end \$output at
		                             the current timestamp.
	_end_of_message
}

fatal () {
    printf "$0: fatal: $*" >&2
	lend_a_hand
    exit 1
}

check_arg_qty () {
    if [[ $# < 1 ]]
    then
        fatal not enough arguments
    else
        return 0
    fi
}

which_option () {
    if [[ ( $1 == "-h" || $1 == "--help" ) ]]
    then
        lend_a_hand
        return 0
    else
        fatal unknown option
    fi
}

#######################
## Main program flow ##
#######################

check_arg_qty $*
if [[ $1 =~ ^\-{1,2}[[:alpha:]]+(\-[[:alpha:]]+)?+$ ]]
then
	which_option $1
    printf "\n\nYour option was valid! Good job.\n"
else
    fatal what are you even talking about
fi

exit 0
